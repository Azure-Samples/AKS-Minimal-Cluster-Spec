name: Deploy Minimal Spec AKS Cluster

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'infra/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'infra/**'
      - '.github/workflows/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - test
          - staging
          - prod
      cluster_name:
        description: 'Name of the AKS cluster'
        required: false
        default: 'aks-minimal-gh'

env:
  AZURE_RESOURCE_GROUP: rg-minimal-aks
  AZURE_LOCATION: eastus
  CLUSTER_NAME: ${{ github.event.inputs.cluster_name || 'aks-minimal-gh' }}
  ENVIRONMENT: ${{ github.event.inputs.environment || 'dev' }}

permissions:
  contents: read
  id-token: write

jobs:
  validate:
    name: Validate Infrastructure
    runs-on: ubuntu-latest
    outputs:
      bicep-changed: ${{ steps.changes.outputs.bicep }}
      arm-changed: ${{ steps.changes.outputs.arm }}
      terraform-changed: ${{ steps.changes.outputs.terraform }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2

    - name: Detect changes
      uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          bicep:
            - 'infra/**/*.bicep'
            - 'infra/**/*.json'
          arm:
            - 'arm/**/*.json'
          terraform:
            - 'terraform/**/*.tf'
            - 'terraform/**/*.tfvars'

    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Validate Bicep templates
      if: steps.changes.outputs.bicep == 'true'
      run: |
        echo "Validating Bicep templates..."
        cd infra
        az bicep build --file main.bicep
        az deployment group validate \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --template-file main.bicep \
          --parameters clusterName=${{ env.CLUSTER_NAME }} environment=${{ env.ENVIRONMENT }}

    - name: Validate ARM templates
      if: steps.changes.outputs.arm == 'true'
      run: |
        echo "Validating ARM templates..."
        cd arm
        az deployment group validate \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --template-file azuredeploy.json \
          --parameters clusterName=${{ env.CLUSTER_NAME }} environment=${{ env.ENVIRONMENT }}

    - name: Setup Terraform
      if: steps.changes.outputs.terraform == 'true'
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0

    - name: Validate Terraform
      if: steps.changes.outputs.terraform == 'true'
      run: |
        echo "Validating Terraform configuration..."
        cd terraform
        terraform init -backend=false
        terraform validate
        terraform fmt -check

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: validate
    if: |
      (github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch') &&
      github.event_name != 'pull_request'
    environment: 
      name: development
      url: ${{ steps.deploy.outputs.portal_url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Create Resource Group
      run: |
        az group create \
          --name ${{ env.AZURE_RESOURCE_GROUP }} \
          --location ${{ env.AZURE_LOCATION }} \
          --tags environment=${{ env.ENVIRONMENT }} purpose=minimal-aks-cluster

    - name: Deploy AKS Cluster (Bicep)
      id: deploy
      run: |
        echo "Deploying AKS cluster using Bicep..."
        cd infra
        
        deployment_output=$(az deployment group create \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --template-file main.bicep \
          --parameters clusterName=${{ env.CLUSTER_NAME }} environment=${{ env.ENVIRONMENT }} \
          --query 'properties.outputs' \
          --output json)
        
        echo "Deployment completed successfully"
        echo "$deployment_output" | jq '.'
        
        # Extract portal URL for environment URL
        portal_url=$(echo "$deployment_output" | jq -r '.portalUrl.value // empty')
        echo "portal_url=$portal_url" >> $GITHUB_OUTPUT
        
        # Extract kubectl command
        kubectl_cmd=$(echo "$deployment_output" | jq -r '.kubectlConnectCommand.value // empty')
        echo "kubectl_command=$kubectl_cmd" >> $GITHUB_OUTPUT

    - name: Verify Deployment
      run: |
        echo "Verifying AKS cluster deployment..."
        
        # Get credentials
        az aks get-credentials \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name ${{ env.CLUSTER_NAME }} \
          --overwrite-existing
        
        # Verify cluster is accessible
        kubectl cluster-info
        kubectl get nodes
        kubectl get pods --all-namespaces

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: validate
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: 
      name: production
      url: ${{ steps.deploy.outputs.portal_url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Create Resource Group
      run: |
        az group create \
          --name ${{ env.AZURE_RESOURCE_GROUP }}-prod \
          --location ${{ env.AZURE_LOCATION }} \
          --tags environment=prod purpose=minimal-aks-cluster

    - name: Deploy AKS Cluster (Bicep)
      id: deploy
      run: |
        echo "Deploying production AKS cluster..."
        cd infra
        
        deployment_output=$(az deployment group create \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }}-prod \
          --template-file main.bicep \
          --parameters clusterName=${{ env.CLUSTER_NAME }}-prod environment=prod nodeCount=2 \
          --query 'properties.outputs' \
          --output json)
        
        echo "Production deployment completed successfully"
        echo "$deployment_output" | jq '.'
        
        # Extract portal URL
        portal_url=$(echo "$deployment_output" | jq -r '.portalUrl.value // empty')
        echo "portal_url=$portal_url" >> $GITHUB_OUTPUT

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Checkov security scan
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        framework: terraform,cloudformation,arm,bicep
        output_format: sarif
        output_file_path: reports/results.sarif
        download_external_modules: true
        
    - name: Upload Checkov results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: reports/results.sarif

  cleanup:
    name: Cleanup Development Resources
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev'
    environment: development
    
    steps:
    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Delete Development Resources
      run: |
        echo "Cleaning up development resources..."
        az group delete \
          --name ${{ env.AZURE_RESOURCE_GROUP }} \
          --yes --no-wait
        
        echo "Cleanup initiated. Resources will be deleted in the background."
